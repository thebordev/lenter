package com.theboringdevelopers.commentator.feature.reporter

import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json

@Serializable
data class BugReport(
    val environment: String = "",
    val buildNumber: String = "",
    val phoneModel: String = "Any",
    val osVersion: String = "Any",
    val car: String = "",
    val requirementLink: String = "",
    val preconditions: String = "",
    val stepsToReproduce: String = "",
    val actualResult: String = "",
    val expectedResult: String = "",
    val additionalInfo: String = ""
) {
    fun toHtmlTable(): String {
        fun escape(text: String) = text
            .replace("&", "&amp;")
            .replace("<", "&lt;")
            .replace(">", "&gt;")
            .replace("\"", "&quot;")

        return """
        <html>
        <head>
            <style>
                body { 
                    font-family: 'Segoe UI', Arial, sans-serif; 
                    padding: 10px;
                }
                table { 
                    border-collapse: collapse; 
                    width: 100%; 
                    margin: 10px 0;
                    background-color: white;
                }
                th, td { 
                    border: 1px solid #ccc; 
                    padding: 10px; 
                    text-align: left;
                    vertical-align: top;
                }
                th { 
                    background-color: #e8e8e8; 
                    font-weight: bold;
                    width: 35%;
                }
                td { 
                    white-space: pre-wrap;
                }
                .empty-row td {
                    background-color: #f9f9f9;
                    height: 5px;
                    padding: 2px;
                }
            </style>
        </head>
        <body>
            <table>
                <tr><th>–ü–æ–ª–µ</th><th>–ó–Ω–∞—á–µ–Ω–∏–µ</th></tr>
                <tr><td>‚≠ê –û–∫—Ä—É–∂–µ–Ω–∏–µ (prod/stage/dev)</td><td>${escape(environment).ifEmpty { "&nbsp;" }}</td></tr>
                <tr><td>‚≠ê –ù–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏</td><td>${escape(buildNumber).ifEmpty { "&nbsp;" }}</td></tr>
                <tr><td>‚≠ê –¢–µ–ª–µ—Ñ–æ–Ω (–º–æ–¥–µ–ª—å)</td><td>${escape(phoneModel)}</td></tr>
                <tr><td>‚≠ê –í–µ—Ä—Å–∏—è –û–°</td><td>${escape(osVersion)}</td></tr>
                <tr><td>–ê–≤—Ç–æ–º–æ–±–∏–ª—å (–µ—Å–ª–∏ –≤–∞–∂–Ω–æ)</td><td>${escape(car).ifEmpty { "&nbsp;" }}</td></tr>
                <tr><td>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –≤–∞–∂–Ω–æ)</td><td>${escape(requirementLink).ifEmpty { "&nbsp;" }}</td></tr>
                <tr class="empty-row"><td colspan="2">&nbsp;</td></tr>
                <tr><td>üí° –ü—Ä–µ–¥—É—Å–ª–æ–≤–∏—è</td><td>${escape(preconditions).ifEmpty { "&nbsp;" }}</td></tr>
                <tr class="empty-row"><td colspan="2">&nbsp;</td></tr>
                <tr><td>‚ÑπÔ∏è –®–∞–≥–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è</td><td>${
            escape(stepsToReproduce).replace("\n", "<br>").ifEmpty { "&nbsp;" }
        }</td></tr>
                <tr class="empty-row"><td colspan="2">&nbsp;</td></tr>
                <tr><td>‚ùå –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</td><td>${escape(actualResult).ifEmpty { "&nbsp;" }}</td></tr>
                <tr><td>üí° –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</td><td>${escape(expectedResult).ifEmpty { "&nbsp;" }}</td></tr>
                <tr><td>‚ùì –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</td><td>${escape(additionalInfo).ifEmpty { "&nbsp;" }}</td></tr>
            </table>
        </body>
        </html>
    """.trimIndent()
    }

    fun toJiraTable(): String {
        // Confluence Wiki Markup —ç–º–æ–¥–∑–∏:
        // (*) = –∂–µ–ª—Ç–∞—è –∑–≤–µ–∑–¥–∞
        // (!) = –ª–∞–º–ø–æ—á–∫–∞ (–ø—Ä–µ–¥—É—Å–ª–æ–≤–∏—è)
        // (i) = –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—à–∞–≥–∏)
        // (x) = –∫—Ä–µ—Å—Ç–∏–∫/–æ—à–∏–±–∫–∞ (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
        // (on) = –ª–∞–º–ø–æ—á–∫–∞ –≥–æ—Ä—è—â–∞—è (–æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
        // (?) = –≤–æ–ø—Ä–æ—Å (–¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—É—Å–ª–æ–≤–∏—è –∫–∞–∫ —Å–ø–∏—Å–æ–∫
        val preconditionsFormatted = if (preconditions.isNotEmpty()) {
            preconditions.split("\n")
                .filter { it.isNotBlank() }
                .joinToString("\n") { "* $it" }
        } else {
            "* \u00A0" // –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –ø—Ä–æ–±–µ–ª
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —à–∞–≥–∏ –∫–∞–∫ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        val stepsFormatted = if (stepsToReproduce.isNotEmpty()) {
            stepsToReproduce.split("\n")
                .filter { it.isNotBlank() }
                .joinToString("\n") { "# $it" }
        } else {
            "# \u00A0"
        }

        return """
||–ü–æ–ª–µ||–ó–Ω–∞—á–µ–Ω–∏–µ||
||(*) –û–∫—Ä—É–∂–µ–Ω–∏–µ _(prod/stage/dev)_||${if (environment.isNotEmpty()) "_${environment}_" else "\u00A0"}||
||(*) –ù–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏||${buildNumber.ifEmpty { "\u00A0" }}||
||(*) –¢–µ–ª–µ—Ñ–æ–Ω _(–º–æ–¥–µ–ª—å)_||${phoneModel.ifEmpty { "\u00A0" }}||
||(*) –í–µ—Ä—Å–∏—è –û–°||${osVersion.ifEmpty { "\u00A0" }}||
||–ê–≤—Ç–æ–º–æ–±–∏–ª—å (_–µ—Å–ª–∏ –≤–∞–∂–Ω–æ_)||${car.ifEmpty { "\u00A0" }}||
||–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ _(–µ—Å–ª–∏ –≤–∞–∂–Ω–æ)_||${requirementLink.ifEmpty { "\u00A0" }}||
||\u00A0||\u00A0||
||*(!) –ü—Ä–µ–¥—É—Å–ª–æ–≤–∏—è*||$preconditionsFormatted||
||*(i) –®–∞–≥–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è*||$stepsFormatted||
||*(x) –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç*||${actualResult.ifEmpty { "\u00A0" }}||
||*(on) –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç*||${expectedResult.ifEmpty { "\u00A0" }}||
||_(?) –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è_||${additionalInfo.ifEmpty { "\u00A0" }}||

\u00A0
        """.trimIndent()
    }

    fun toPlainTextTable(): String {
        val maxKeyLength = 35

        fun formatRow(key: String, value: String): String {
            val lines = value.split("\n")
            return if (lines.size == 1) {
                "| ${key.padEnd(maxKeyLength)} | ${lines[0]}"
            } else {
                val first = "| ${key.padEnd(maxKeyLength)} | ${lines[0]}"
                val rest = lines.drop(1).joinToString("\n") {
                    "| ${" ".repeat(maxKeyLength)} | $it"
                }
                "$first\n$rest"
            }
        }

        val separator = "+" + "-".repeat(maxKeyLength + 2) + "+" + "-".repeat(50) + "+"

        return """
$separator
${formatRow("–ü–æ–ª–µ", "–ó–Ω–∞—á–µ–Ω–∏–µ")}
$separator
${formatRow("‚≠ê –û–∫—Ä—É–∂–µ–Ω–∏–µ (prod/stage/dev)", environment)}
${formatRow("‚≠ê –ù–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏", buildNumber)}
${formatRow("‚≠ê –¢–µ–ª–µ—Ñ–æ–Ω (–º–æ–¥–µ–ª—å)", phoneModel)}
${formatRow("‚≠ê –í–µ—Ä—Å–∏—è –û–°", osVersion)}
${formatRow("–ê–≤—Ç–æ–º–æ–±–∏–ª—å (–µ—Å–ª–∏ –≤–∞–∂–Ω–æ)", car)}
${formatRow("–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ", requirementLink)}
$separator
${formatRow("üí° –ü—Ä–µ–¥—É—Å–ª–æ–≤–∏—è", preconditions)}
$separator
${formatRow("‚ÑπÔ∏è –®–∞–≥–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è", stepsToReproduce)}
$separator
${formatRow("‚ùå –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", actualResult)}
${formatRow("üí° –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", expectedResult)}
${formatRow("‚ùì –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", additionalInfo)}
$separator
        """.trimIndent()
    }

    companion object {
        private val json = Json {
            ignoreUnknownKeys = true
            isLenient = true
            coerceInputValues = true
        }

        fun fromJson(jsonString: String): BugReport? {
            return try {
                json.decodeFromString<BugReport>(jsonString)
            } catch (e: Exception) {
                println("kotlinx.serialization failed, trying manual parsing: ${e.message}")
                fromJsonManual(jsonString)
            }
        }

        private fun fromJsonManual(jsonString: String): BugReport? {
            return try {
                val fields = mutableMapOf<String, String>()

                // –ü—Ä–æ—Å—Ç–æ–π regex –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª–µ–π
                val pattern = """"(\w+)"\s*:\s*"((?:[^"\\]|\\.)*)"""".toRegex()

                pattern.findAll(jsonString).forEach { match ->
                    val key = match.groupValues[1]
                    val value = match.groupValues[2]
                        .replace("\\n", "\n")
                        .replace("\\\"", "\"")
                        .replace("\\\\", "\\")
                    fields[key] = value
                }

                BugReport(
                    environment = fields["environment"] ?: "",
                    buildNumber = fields["buildNumber"] ?: "",
                    phoneModel = fields["phoneModel"] ?: "Any",
                    osVersion = fields["osVersion"] ?: "Any",
                    car = fields["car"] ?: "",
                    requirementLink = fields["requirementLink"] ?: "",
                    preconditions = fields["preconditions"] ?: "",
                    stepsToReproduce = fields["stepsToReproduce"] ?: "",
                    actualResult = fields["actualResult"] ?: "",
                    expectedResult = fields["expectedResult"] ?: "",
                    additionalInfo = fields["additionalInfo"] ?: ""
                )
            } catch (e: Exception) {
                println("Manual parsing also failed: ${e.message}")
                null
            }
        }
    }
}
